=Software Process and Life Cycle
MODELS AND PROCESSES IMPLEMENTATION - про моделі розробки ПО. Ітеративні, аджайл т.д. Вибір моделі залежно від типу проекту (розробка, супорт і т.д.).
Key Knowledge:

- Software lifecycle model types
- Scalable software lifecycle model types


PROCESS MANAGEMENT AND DATA COLLECTION - процеси, метрики, порядок дій при розробці, бюрократія.
Practical Aspects:

- Process measurement metrics
- Process management


SOFTWARE PROCESS TAILORING - як стандартизовані процеси розробки аджастаються під потреби проекта чи клієнта. 
Наприклад, кородші релізи на Медхості після зміни керівництва.
Наприклад, прайс транспаренсі довшими релізами йде ніж основний проект. Так само як мобайл і УСЕ.
Key Knowledge:

- Software lifecycle model types
- Software processes understanding 

PROCESS ASSESSMENT AND IMPROVEMENT - оцінка і покращення процесів компанії. Непонятно шо таке. Спитати Наталю і Артьома.
Key Knowledge:

- software process assessment models
- software process assessment methods
- software process improvement models
- continuous and staged process ratings
- SCAMPI


=Software Requirements
STAKEHOLDERS COLLABORATION – комунікація з стекхолдерами відносно розробки продукту.
Key Knowledge: 
- Stakeholders identification 
- RACI matrix 
- Requirements Negotiation 
- Requirements Change Management 
- Scope creep - Gold plating


REQUIREMENTS ELICITATION AND ANALYSIS - збір та аналіз різного роду реквайрментів від стекхолдерів. Їх документування.
Key Knowledge:

- Requirement definition
- Requirements prioritization
- Requirements classification
- Project scope Vs. Product scope
- Definition of a Software Requirement
- Product and process requirements
- Functional and nonfunctional requirements
- System requirements and software requirements
- Requirements development process
- Elicitation techniques
- Conceptual modelling
- Requirements engineering

REQUIREMENTS SPECIFICATION AND VALIDATION - визначають що робить продукт і що від нього очікують. Документують, описують, діаграми і т.д.
Тако ж валідуються реквайрменти чи вони відповідають тому, що потребує система і чи нема конфліктів бо потім вирішувати так речі буде дорожче.

Key Knowledge:

- Characteristics of Excellent Requirements
- Quantifiable Requirements
- Requirements validation techniques

=Software Design
FUNDAMENTAL DESIGN TECHNIQUES  - при розробці модулів чи імплементації фічі виуористовувати техніки дизайну шоб наглядно показати компоненти, 
їх взаємодію, абстракції, когіжен, каплінг і т.д.
Key Knowledge:

- Design in the Software Development Process
- Modularization, Hierarchy, Abstraction, Encapsulation
- Coupling and Cohesion
- Decomposition and modularization
- Encapsulation and information hiding
- Separation of interface and implementation
- Separation of concerns principle

ARCHITECTURAL PATTERNS AND STYLES  - стиль це опис компонентів і їх взаємодії разом з констрейнтами і як 
вони мають юзатися - описують хайлевельно організацію софтвара.
Архітектурні патерна - це набір рішень з точки зору дизайну ПО.

Key Knowledge:
module structures, component-and-connector structures, and allocation structures
- Architecture styles
- Architecture patterns
- Architecture views
- Architecture models
- OOD

COMPONENTS AND MODULES DESIGN - дизайн компонентів і модулів, діаграм і потернів.
Key Knowledge:

- Design models
- Design patterns
- Notations
- Diagramming techniques

RESTRUCTURING AND REFACTORING - рефакторінг компонентів, покращення реюзабіліті, створення абстракцій.
Key Knowledge:
- Refactoring and restructuring methods

DESIGN QUALITY ANALYSIS AND EVALUATION - робота над не функціональними реквайрментами такими як мейнтейнабіліті, юзабіліті, 
тестабіліті, коректнесс, комплітнесс

Key Knowledge:
- Quality Analysis and Evaluation Techniques

=Software Construction Management
CROSS-TEAM COLLABORATION - 	колаборація між тімами, превірка коду друг друга, мітинги.
Key Knowledge:

- Overview of Collaborative Development Practices
- Pair Programming
- Formal Inspections
- Over-the-shoulder reviews
- E-mail pass-around reviews
- Tool-Assisted reviews
- Other Kinds of Collaborative Development Practices (walkthroughs, code reading, etc.)

REVIEWS AND INSPECTIONS  - кор ревью і інспекція коду.
- Know your technology best practices
- Know your technology weakest sides
- Know code smells
- Security review
- Know and use code review/inspections best practices

CONFIGURATION MANAGEMENT - версіонування коду, контроль за сорцами, релізами, білдами, деплоєм.
Key Knowledge:

- Difference between local, centralized, and distributed source code management tools and their usage
- Source Code Management tools types (Local, Centralized, Distributed such as Git, Subversion, Perforce, etc.)
- Source code storages (repositories)
- Branching and creating new code revisions
- Introducing new changes
- Switching between code versions
- Code conflict resolutions
- Rolling back code changes locally and remotely
- Listing and analyzing code change history
- Comparing code changes of different versions
- Defect detection
- Tracing code change author, dependencies and purpose
- Release versioning

ESTIMATION - естімейт, техніки, принципи:
Key Knowledge:

- Fundamental principles of estimation
- Estimation techniques: 
  - Expert judgment
  - Analogy
  - Estimation by parts
  - Parametric methods
  - Statistical methods
-Techniques for addressing estimation uncertainty:
  - consider ranges of estimates
  - analyze sensitivity to changes in assumptions
- delay final decisions
- Estimation procedure
- Recording estimate

CODE QUALITY MEASUREMENTS - всякі метрико повязані з якістю коду і його кавереджом.
Key Knowledge:
- Maintainability Index
- Cyclomatic Complexity
- Depth of Inheritance and Class Coupling 
- Lines of Code
- Number of Methods
- Number of Fields
- Afferent Coupling
- Efferent Coupling
- Relational Cohesion
- Instability and Abstractness
- Type Rank
- Method Rank
- Number of Parameters
- Number of Variables
- Average Lines of Code for Methods
- Average Lines of Code for Types
- Average Cyclomatic Complexity for Methods
- Change risk analysis
- Code coverage by tests
- Code smells measurement
- Comments/Documentation coverage

CONSTRUCTION PLANNING - планування активностей для побудови процесу розробки. 
Key Knowledge:

- understand the concepts of software processes and software process models;
- have been introduced to three general software process models and when they might be used;
- know about the fundamental process activities of software requirements engineering, software development, testing, and evolution;
- understand why processes should be organized to cope with changes in the software requirements and design;
- understand the notion of software process improvement and the factors that affect software process quality.

STANDARDS AND CONVENTIONS - код стандарти і всякого роду домовленості на проекті.
Key Knowledge:

- Coding conventions of the programming language you are going to use
- Error handling conventions and standards
- Code reuse policy
- Performance standards and best practices
- Teamwork standards (e.g. pair programming)
- Integration standards (e.g the number of steps and criteria that should be done/fulfilled before code is checked out to master)
- Code review standards
- Unit and Integration testing standards
- Configuration management and version control standards

ENVIRONMENT AND TOOLS - тули які використовуються від девелопменту до деплоя на прод.
Key Knowledge:

Knowledge of this activity is concentrated around the building of effective and efficient software construction environment by configuring and empowering the execution environment with different tools, libraries and packages.

- Package dependencies
- Package management tools
- Libraries
- Build tools
- CLI tools
- IDE's
- GUI tools

CONTINUOUS INTEGRATION - код репо, білди по мерджам, деплой на енви.
To achieve these objectives, continuous integration relies on the following principles:

- Maintain a code repository
- Automate the build
- Make the build self-testing
- Everyone commits to the baseline every day
- Keep the build fast
- Test in a clone of the production environment
- Everyone can see the results of the latest build
- Automate deployment
Key Knowledge:

- Continuous integration
- Continuous delivery
- Continuous deployment
- Continuous integration concept, best practices, and framework
- Scripting multiphase build process
- Integrating building of product installer
- Generating release notes and/or other release documentation
- Development of scheduled builds
- Monitoring build process
- Build status reporting and notifications
- Integrating the deployment stage, moving product to release area

=Software Testing and Quality
QUALITY GOALS AND ATTRIBUTES - все шо стосується яксоті та її атрибутів продукту.
Key Knowledge:

- Quality Assurance and Control
- Quality Goals
- Quality Attributes
- Quality Culture
- Quality Standards 

TEST PLANNING - планування ьесьінгу, ресурсу команди для цього, документування темт плану.
Key Knowledge:

- Software Testing Stakeholders
- Success and Failure Criteria
- Test Completion Criteria
- Implement the Software Test Plan
- Acceptance and Demonstration Stakeholders 

PRACTICES AND TECHNIQUES - техінки і методи тестування
See below a list of testing techniques:

- Ad Hoc
- Exploratory Testing
- Input Domain-Based Techniques
  - Equivalence Partitioning
  - Pairwise Testing
  - Boundary-Value Analysis
  - Random Testing
- Code-Based Techniques
  - Control Flow-Based Criteria
  - Data Flow-Based Criteria
  - Reference Models for Code-Based Testing
- Fault-Based Techniques
  - Error Guessing
  - Mutation Testing
- Usage-Based Techniques
  - Operational Profile
  - User Observation Heuristics
- Model-Based Testing Techniques
  - Decision Tables
  - Finite-State Machines
  - Formal Specifications
Workflow Models
- Techniques Based on the Nature of the Application
- Selecting and Combining Techniques
  - Combining Functional and Structural
  - Deterministic vs. Random

Key Knowledge:

- know techniques existence and applicability areas
- be able to analyze which one suites your case

DEFECT TRACKING AND REPORTING - трекінг дефектів. Баги і дефекти це різне. 
Можна по логам чи поведінці системи і т.д. визначити де є потенційна проблема і як покращити тестування наступного разу шоб не було таких проблем.
Key Knowledge:

- Defect Tracking
- Defect Reporting Approaches
- Defect System or Tool
- Test execution Reports
- Defect report
- Test Incident report
- Test Execution Report
- Defect Management Process 

MEASUREMENT AND IMPROVEMENTS - аналіз і метрики на протязі тестування.
Key Knowledge:

- What is test monitoring in software testing?
- Test Progress Monitoring and Control
- Root Cause Analysis
- Strategies to reduce rework in software development
- Improving the Testing Process
- Test Effectiveness snd Test Efficiency
- Evaluating the Effectiveness of Software Testing Techniques
- Testing Metrics: Measuring Product, Process and Project Quality 

=Software Construction Testing and Debugging
TEST FRAMEWORKS - вреймворки для тестів. принципи тестування.
Key Knowledge:

- know existing test frameworks and their advantages
- unit-testing principles

UNIT TESTING TECHNIQUES AND TOOLS - юніт тестування і тули для нього.
Key Knowledge:

- Knowledge of unit testing techniques specific
- Knowledge of unit testing tools within project technology

INTEGRATION TESTING TECHNIQUES AND TOOLS - інтеграційне тестування і тули для нього.
Key Knowledge:

- Integration testing approaches, strategies, and methodologies
- Integration types
- Integration testing tools and frameworks
- Integration testing best practices

TEST COVERAGE - тест ковередж, тули для нього і аналіз.
Key Knowledge:

- Test coverage tools
- Test coverage goals definition
- Test coverage data analysis

TESTING PRACTICES AND TECHNIQUES -
Key Knowledge:

- know techniques existence and applicability areas
- be able to analyze which one suites your case

DEBUGGING TOOLS AND TECHNIQUES  - дебаг і тули.
Key Knowledge:

- knowledge of existing debugging tools and areas of applicability of these tools
- knowledge of debugging techniques

=Software Competency Development
EVALUATION AND INTERVIEW - техніки, проведення, оцінювання інтерью.
 
BEST PRACTICES CATALOG AND STANDARDS - бест практіс і стандарти компетенцій по профайлу при оцінюванні на інтервью і власному розвитку?
 
SUPERVISION AND CONSULTING - супервайзінг, 1 ту 1 діскашени шоб імпрувнути скіли тім мембера ждя покращення перформансу.
 
EXPERTISE PRESENTATION AND PROMOTION - обмінюватися опитом з комуніті в середині профайлу. Презентації.
 
=Software Construction Design and Coding
CLOUDS DESIGN AND COMPUTING - побудова архітектури в клауді за допомогою бест практіс і патернів.
 
DESIGN AND DESIGN PATTERNS - дизайн програмних рішень на основі бест практіс, патернів і підходів.
 
FRAMEWORK USAGE AND EXTENSIONS - фреймворки, їх екстеншени і депенденсі.
 Key Knowledge:

- Framework core
- Framework extensions
- Framework configuration
- Framework dependencies

API DESIGN AND USE - Апішки.
Key Knowledge:

- API types
- API best practices
- Resource types and modeling
- API from HTTP perspective (e.g. status codes, methods, headers, URI's)
- API response representations
- API versioning
- API security
- API authentication and authorization

DATABASE DESIGN AND DATA MANAGEMENT - бд, структура даних в них.
Key Knowledge:

- Relational Database normalization
- Relational Database denormalization
- Database types
- Structured Query Language and Usage
- Selecting data
- Ordering and Grouping data
- Data aggregation
- Transactions and ACID
- Query performance optimization

PRIMARY LANGUAGE AND CODING - основна мова і її фішки. 
Key Knowledge:

- Programming language keywords
- Programming language semantics
- Programming language standard library possibilities
- Programming language ecosystem (e.g. package managers, etc)
- Parallelism and Distribution
- Programming language paradigm

SUPPORTIVE LANGUAGE AND CODING - фішки інших мов які юзав. Всякі там груві, гоу, юайку і ь.д.
Key Knowledge:

- Programming language keywords
- Programming language semantics
- Programming language standard library possibilities
- Programming language ecosystem (e.g. package managers, etc)
- Parallelism and Distribution
- Programming language paradigm

REFACTORING AND REENGINEERING - реінженіринг і рефакторінг.
Реінженірінг зазвичай роблять як продукт уже в підтримці деякий час і роблять зміни шоб зменшити кости на цю підтримку.
Так шось легасі переписують на нові тули шоб зробити систему більш мейнтенбл.
Рефакторінг ж роблять на протязі всього процесу розробки програмного продукту.

Key Knowledge:

- Refactoring principles
- Bad smell recognition
- Generalization concept
